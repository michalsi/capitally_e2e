File Name: fixtures.ts, Path: e2e/fixtures.ts
Content:
```
import {test as base} from '@playwright/test'

import {SummaryPage} from './pages/SummaryPage';
import {PageObjects} from './pages/pageObjects'
import {StartTrialPage} from "./pages/StartTrialPage";
import {PortfolioPage} from "./pages/PortfolioPage";
import {AssetPage} from "./pages/AssetPage";
import {ReportsPage} from "./pages/ReportsPage";
import {TransactionModal} from "./pages/TransactionModal";

export const test = base.extend<{
    testContext: PageObjects
}>({
    testContext: async ({page}, use) => {
        const testContext: PageObjects = {
            assetPage: new AssetPage(page),
            portfolioPage: new PortfolioPage(page),
            reportsPage: new ReportsPage(page),
            summaryPage: new SummaryPage(page),
            startTrialPage: new StartTrialPage(page),
            transactionModal: new TransactionModal(page)
        }
        await use(testContext)
    },

})

```
----------------------------------------
File Name: SummaryTest.spec.ts, Path: e2e/tests/SummaryTest.spec.ts
Content:
```
import {test} from '../fixtures'
import {expect} from "@playwright/test";
import {StartTrialPage} from "../pages/StartTrialPage";


test('Verif Summary page and redirection to free trial', async ({testContext}) => {
        const {summaryPage, startTrialPage} = testContext
        const {START_TRIAL_TEXT} = StartTrialPage;

        await summaryPage.navigate();
        await summaryPage.acceptCookies();
        await summaryPage.verifyElements();
        await summaryPage.clickStartFreeTrial()
        const headerText = await startTrialPage.getStartTrialHeaderText();

        expect(headerText).toContain(START_TRIAL_TEXT);
    }
)

```
----------------------------------------
File Name: PortfolioTest.spec.ts, Path: e2e/tests/PortfolioTest.spec.ts
Content:
```
import {test} from "../fixtures";
import {expect} from "@playwright/test";

test("Verify Portfolio - adding assets not supported by demo account", async ({testContext}) => {
        let searchAsset = "tesla";
        let assetNameToWait = "Tesla Inc Stock Â· NASDAQ TSLA";

        const {portfolioPage} = testContext
        await portfolioPage.navigate()
        await portfolioPage.acceptCookies()

        await portfolioPage.clickThroughAllUpperMenuItems()
        await portfolioPage.clickThroughAllLowerMenuItems()

        await portfolioPage.clickPositions()
        await portfolioPage.addAsset(searchAsset, assetNameToWait)
        await expect(portfolioPage.getAddAssetDemoDialog()).toBeVisible()
        await portfolioPage.closeAddAssetDemoDialog()
    }
)

test("Verify Portfolio - adding new transaction", async ({testContext}) => {
        let positionName = 'Microsoft Corporation';
        const {assetPage, portfolioPage} = testContext

        const timestamp = Date.now();
        const transactionName: string = `My Transaction @ ${timestamp}`;
        const transactionAmount: number = 1

        await portfolioPage.navigate()
        await portfolioPage.acceptCookies()

        await portfolioPage.openPositionDetails(positionName)
        await assetPage.performBuyTransaction(transactionAmount, transactionName)
        await assetPage.clickTransactionsTab()
        await assetPage.openBuyTransaction()

        await expect(assetPage.getTransactionQuantity()).toHaveValue(transactionAmount.toString());
        await expect(assetPage.getTransactionNotes()).toContainText(transactionName)
    }
)
```
----------------------------------------
File Name: ReportsTest.spec.ts, Path: e2e/tests/ReportsTest.spec.ts
Content:
```
import {test} from "../fixtures";
import {expect} from "@playwright/test";

test("Reports Test", async ({testContext})=>{
    const {summaryPage, reportsPage} = testContext
    await summaryPage.navigate()
    await summaryPage.acceptCookies()

    await summaryPage.clickReportsMenu()
    await expect(reportsPage.getHeader()).toBeVisible()
    await expect(reportsPage.getTotalsHeader()).toBeVisible()

    let values = await reportsPage.getTotalRowValues()
    console.log(values)
})
```
----------------------------------------
File Name: PortfolioPage.ts, Path: e2e/pages/PortfolioPage.ts
Content:
```
import {expect, Locator, Page} from '@playwright/test';
import {BasePage} from './BasePage';

export class PortfolioPage extends BasePage {
    totalReturnsLink: Locator = this.page.getByRole('link', {name: 'Total Returns'});
    incomeLink: Locator = this.page.getByRole('link', {name: /Income/});
    feesLink: Locator = this.page.getByRole('link', {name: /Fees/});
    taxDueLink: Locator = this.page.getByRole('link', {name: /Tax Due/});
    accountsTab: Locator = this.page.getByText('Accounts', {exact: true});
    assetsTab: Locator = this.page.getByText('Assets', {exact: true});
    transactionsTab: Locator = this.page.getByText('Transactions', {exact: true});

    typesLink: Locator = this.page.getByText('Types');
    currenciesLink: Locator = this.page.getByText('Currencies');
    marketsLink: Locator = this.page.getByText('Markets');
    tagsLink: Locator = this.page.getByText('Tags');
    categoriesLink: Locator = this.page.getByText('Categories');
    regionsLink: Locator = this.page.getByText('Regions');
    sectorsLink: Locator = this.page.getByText('Sectors');
    positionsLink: Locator = this.page.getByText('Positions');

    allAssetsLink: Locator = this.page.getByText('All assets');
    liquidAssetsLink: Locator = this.page.getByText('Liquid assets');
    openedLink: Locator = this.page.getByText('Opened');
    retirementLink: Locator = this.page.getByText('Retirement');
    stocksLink: Locator = this.page.getByText('Stocks');
    withIncomeLink: Locator = this.page.getByText('With Income');
    rateOfReturnLink: Locator = this.page.getByRole('link', {name: 'Rate of Return (MWR)'});

    addAssetButton: Locator = this.page.getByRole('button', {name: 'Add Asset'});
    assetCombobox: Locator = this.page.getByRole('combobox', {name: "Enter asset's name, SYMBOL or"});
    addAssetDialog: Locator = this.page.getByText('This is a Demo projectDemo');
    okButton: Locator = this.page.getByRole('button', {name: 'OK'});

    searchBox: Locator = this.page.getByRole('textbox', {name: 'Type here to search the table'});



    readonly url = '/demo-1/explorer';

    constructor(page: Page) {
        super(page);
    }

    async clickLiquidAssets() {
        await this.liquidAssetsLink.click();
    }

    async clickOpened() {
        await this.openedLink.click();
    }

    async clickRetirement() {
        await this.retirementLink.click();
    }

    async clickStocks() {
        await this.stocksLink.click();
    }

    async clickWithIncome() {
        await this.withIncomeLink.click();
    }

    async clickAllAssets() {
        await this.allAssetsLink.click();
    }

    async clickTotalReturns() {
        await this.totalReturnsLink.click();
    }

    async clickRateOfReturn() {
        await this.rateOfReturnLink.click();
    }

    async clickIncome() {
        await this.incomeLink.click();
    }

    async clickFees() {
        await this.feesLink.click();
    }

    async clickTaxDue() {
        await this.taxDueLink.click();
    }

    async clickThroughAllUpperMenuItems() {
        await this.clickLiquidAssets();
        await this.clickOpened();
        await this.clickRetirement();
        await this.clickStocks();
        await this.clickWithIncome();
        await this.clickAllAssets();
        await this.clickTotalReturns();
        await this.clickRateOfReturn();
        await this.clickIncome();
        await this.clickFees();
        await this.clickTaxDue();
    }

    async clickAccounts() {
        await this.accountsTab.click();
    }

    async clickPositions() {
        await this.positionsLink.click()
    }

    async clickAssets() {
        await this.assetsTab.click();
    }

    async clickTransactions() {
        await this.transactionsTab.click();
    }

    async clickTypes() {
        await this.typesLink.click();
    }

    async clickTags() {
        await this.tagsLink.click();
    }

    async clickCurrencies() {
        await this.currenciesLink.click();
    }

    async clickMarkets() {
        await this.marketsLink.click();
    }

    async clickCategories() {
        await this.categoriesLink.click();
    }

    async clickRegions() {
        await this.regionsLink.click();
    }

    async clickSectors() {
        await this.sectorsLink.click();
    }

    // Method to click through all lower menu items
    async clickThroughAllLowerMenuItems() {
        await this.clickAccounts();
        await this.clickAssets();
        await this.clickTypes();
        await this.clickCurrencies();
        await this.clickMarkets();
        await this.clickTags();
        await this.clickCategories();
        await this.clickRegions();
        await this.clickSectors();
        await this.clickTransactions();
        await this.clickPositions();
    }

    async openMenuAndSelectPosition() {
        await this.addAssetButton.click();
    }

    async addAsset(assetName: string, assetNameToWait: string) {
        await this.addAssetButton.click();
        await this.assetCombobox.click();
        await this.assetCombobox.fill(assetName);
        await expect(this.page.getByRole('option', {name: assetNameToWait})).toBeVisible();
        await this.assetCombobox.press('Enter');
    }

    getAddAssetDemoDialog() {
        return this.addAssetDialog
    }

    async closeAddAssetDemoDialog() {
        await this.okButton.click();

    }

    async openPositionDetails(positionName: string) {
        await this.searchBox.fill(positionName);
        await this.searchBox.press('Enter');
        await this.page.getByRole('link', {name: positionName}).click()
    }

}
```
----------------------------------------
File Name: StartTrialPage.ts, Path: e2e/pages/StartTrialPage.ts
Content:
```
import {BasePage} from "./BasePage";
import {Locator, Page} from "@playwright/test";

export class StartTrialPage extends BasePage{
    readonly url = null;
    static readonly START_TRIAL_TEXT : string = "start your trial ð"
    startTrialHeader : Locator  = this.page.getByRole('heading', { name: StartTrialPage.START_TRIAL_TEXT })

    constructor(page: Page) {
        super(page);
    }

    async getStartTrialHeaderText() {
        return await this.startTrialHeader.innerText();
    }


}
```
----------------------------------------
File Name: ReportsPage.ts, Path: e2e/pages/ReportsPage.ts
Content:
```
import {BasePage} from "./BasePage";
import {Locator, Page} from "@playwright/test";

export class ReportsPage extends BasePage{
    header: Locator = this.page.locator('h1');
    totalRow: Locator =this.page.locator('._footer_bevwa_20 .notranslate span');
    totalsHeader: Locator = this.page.getByText('Totals')
    readonly url: string = this.BASE_URL + "/demo-1/reports/r-income";

    constructor(page : Page) {
        super(page);
    }

    async getTotalRowValues(){
        const values = await this.totalRow.allTextContents();
        return values.join(' ');
    }

    getHeader(){
        return this.header;
    }

    getTotalsHeader(){
        return this.totalsHeader;
    }
}
```
----------------------------------------
File Name: TransactionModal.ts, Path: e2e/pages/TransactionModal.ts
Content:
```
import {Locator, Page} from "@playwright/test";
import {BasePage} from "./BasePage";

export class TransactionModal extends BasePage {
    // Locators
    buyRadioButton: Locator = this.page.getByRole('radio', {name: 'Buy'});
    quantityInput: Locator = this.page.locator('input[name="qty"]');
    dollarSymbolLink: Locator = this.page.locator('a').filter({hasText: '$'});
    paragraphElement: Locator = this.page.getByRole('paragraph');
    emptyNotesTextbox: Locator = this.page.locator('div')
        .filter({hasText: /^NotesAdd a note, you can use \*\*markdown\*\* and paste links here\.\.\.$/})
        .getByRole('textbox');
    notesTextBox: Locator = this.page.locator('div').filter({hasText: /^Notes$/}).locator('+ div');
    addButton: Locator = this.page.getByRole('button', {name: 'Add'});

    readonly url = null;

    constructor(page: Page) {
        super(page);
    }

    async addTransactionDetails(amount: number, notes: string) {
        await this.buyRadioButton.check();
        await this.quantityInput.fill(String(amount));
        await this.dollarSymbolLink.click();
        await this.paragraphElement.click();
        await this.emptyNotesTextbox.fill(notes);
        await this.addButton.click();
    }

    getTransactionQuantity() {
        return this.quantityInput
    }

    getTransactionNotes() {
        return this.notesTextBox;
    }
}
```
----------------------------------------
File Name: AssetPage.ts, Path: e2e/pages/AssetPage.ts
Content:
```
import {BasePage} from "./BasePage";
import {Locator, Page} from "@playwright/test";
import {TransactionModal} from "./TransactionModal";

export class AssetPage extends BasePage {
    readonly url: string = null;
    transactionModal: TransactionModal
    addTransactionButton: Locator = this.page.getByRole('button', {name: 'Add Transaction'})
    transactionsTab: Locator = this.page.locator('div').filter({hasText: /^Transactions$/})
    buyTransactionLink: Locator = this.page.getByText('Buy', {exact: true})

    constructor(page: Page) {
        super(page);
        this.transactionModal = new TransactionModal(page);

    }

    async performBuyTransaction(amount: number, transactionNotes: string) {
        await this.addTransactionButton.click()

        await this.transactionModal.addTransactionDetails(amount, transactionNotes)
    }

    async clickTransactionsTab() {
        await this.transactionsTab.click();
    }

    async openBuyTransaction() {
        await this.buyTransactionLink.click()
        await this.page.getByText('BuyMSFT Â· Microsoft CorporationDateAccountð¦Stocks').waitFor()
    }

    getTransactionQuantity() {
        return this.transactionModal.getTransactionQuantity()
    }

    getTransactionNotes() {
        return this.transactionModal.getTransactionNotes()
    }
}
```
----------------------------------------
File Name: PageObjects.ts, Path: e2e/pages/PageObjects.ts
Content:
```
import {AssetPage} from "./AssetPage"
import {PortfolioPage} from "./PortfolioPage";
import {ReportsPage} from "./ReportsPage";
import {SummaryPage} from "./SummaryPage";
import {StartTrialPage} from "./StartTrialPage";
import {TransactionModal} from "./TransactionModal";


export interface PageObjects{
    assetPage : AssetPage;
    summaryPage : SummaryPage;
    startTrialPage: StartTrialPage
    portfolioPage : PortfolioPage;
    reportsPage: ReportsPage;
    transactionModal : TransactionModal;
}
```
----------------------------------------
File Name: SummaryPage.ts, Path: e2e/pages/SummaryPage.ts
Content:
```
import {expect, Locator, Page} from '@playwright/test';
import {BasePage} from "./BasePage";
import {StartTrialPage} from "./StartTrialPage";

export class SummaryPage extends BasePage {
    welcomeHeading: Locator = this.page.getByRole('heading', {name: 'Welcome to Capitally Demo ð¥³'});
    startFreeTrialButton: Locator = this.page.getByRole('link', {name: 'Start free trial to see your'})
    allAssetsLink: Locator = this.page.getByRole('link', {name: 'All assets'});
    liquidAssetsLink: Locator = this.page.getByRole('link', {name: 'Liquid assets'});
    totalMarketValueText: Locator = this.page.getByText('Total market value');
    defaultCompareTo: Locator = this.page.getByText('Compared toS&P');
    topAssetChanges: Locator = this.page.getByRole('link', {name: 'Top asset changes'})
    topAccountChanges: Locator = this.page.getByRole('link', {name: 'Top account changes'})
    topBenchmarkChanges: Locator = this.page.getByText('Top benchmark changes')
    investmentIncome: Locator = this.page.getByRole('link', {name: 'Investment Income in past year'})
    upcomingEstimatedIncome: Locator = this.page.getByRole('link', {name: 'Upcoming and estimated Income'})
   reportsMenu: Locator = this.page.getByRole('link', { name: 'Reports', exact: true });

    readonly url = '/demo-1/summary';

    constructor(page: Page) {
        super(page)
    }

    async verifyElements() {
        await expect(this.welcomeHeading).toBeVisible();
        await expect(this.startFreeTrialButton).toBeVisible();
        await expect(this.allAssetsLink).toContainText('All assets');
        await expect(this.liquidAssetsLink).toContainText('Liquid assets');
        await expect(this.totalMarketValueText).toBeVisible();
        await expect(this.defaultCompareTo).toBeVisible()
        await expect(this.topAssetChanges).toBeVisible()
        await expect(this.topAccountChanges).toBeVisible()
        await expect(this.topBenchmarkChanges).toBeVisible()
        await expect(this.investmentIncome).toBeVisible()
        await expect(this.upcomingEstimatedIncome).toBeVisible()
    }

    async clickStartFreeTrial(){
        await this.startFreeTrialButton.click()
        await this.page.waitForSelector(`h1:text("${StartTrialPage.START_TRIAL_TEXT}")`);
    }

    async clickReportsMenu(){
        await this.reportsMenu.click();
    }
}

```
----------------------------------------
File Name: BasePage.ts, Path: e2e/pages/BasePage.ts
Content:
```
import {Locator, Page} from '@playwright/test'

export abstract class BasePage {
    protected page: Page;
readonly BASE_URL = 'https://app.mycapitally.com/project';
    readonly abstract url: string;
    acceptAllButton: Locator;

    protected constructor(page: Page) {
        this.page = page;
        this.acceptAllButton = this.page.getByRole('button', { name: 'Accept all' });
    }

    async navigate() {
        await this.page.goto(this.BASE_URL + this.url);
    }

    async acceptCookies(){
        await this.acceptAllButton.click()
    }
}


```
----------------------------------------
